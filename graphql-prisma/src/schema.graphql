# import UserOrderByInput, CommentOrderByInput, PostOrderByInput from './generated/prisma.graphql'

type Query {
  users(query: String, first:Int,skip:Int, after:String, orderBy:UserOrderByInput): [User!]!
  posts(query: String, first:Int,skip:Int, after:String, orderBy:PostOrderByInput): [Post!]!
  comments(first:Int,skip:Int, after:String,orderBy:CommentOrderByInput): [Comment!]!
  myPosts(query: String, first:Int,skip:Int, after:String, orderBy:PostOrderByInput): [Post!]!
  me: User!
  post(id:ID!): Post!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayLoad!
  deleteUser: User!
  updateUser(data:UpdateUserInput!):User!
  createPost(data: CreatePostInput!): Post!
  deletePost(id: ID!): Post!
  updatePost(id:ID!,data:UpdatePostInput!):Post!
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id:ID!,data:UpdateCommentInput!):Comment!
  login(data:LoginUserInput!):AuthPayLoad!
}

type Subscription{
  comment(postId:ID!):CommentSubscriptionPayload!
  post:PostSubscriptionPayload!
  myPost: PostSubscriptionPayload!
}

type AuthPayLoad{
  token:String!
  user:User!
}

input CreateUserInput {
  password: String!
  name: String!
  email: String!
}

input UpdateUserInput{
  name:String
  email:String
  password:String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input LoginUserInput{
  email:String!
  password:String!
}

input UpdatePostInput{
  title:String
  body:String
  published:Boolean
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput{
  text:String
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  updatedAt: String!
  createdAt: String!
}

type User {
  id: ID!
  name: String!
  password: String!
  email: String
  posts: [Post!]!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

enum MutationType{
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload{
  mutation:MutationType!
  node:Post
}
type CommentSubscriptionPayload{
  mutation:MutationType!
  node:Comment
}
